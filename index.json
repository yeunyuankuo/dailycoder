[{"categories":["AWS","Cloud","AWS IAM"],"contents":"\nWhat is IAM? In AWS, IAM stands for Identity and Access Management (IAM). It is used to help users securely control access to AWS resources. Everything you do in AWS needs permission, which means that you will eventually encounter or use IAM features when building your own AWS services. IAM features includes deciding things like: who is eligible to sign-in, and who or what has permissions to use resources, etc.\nImportant IAM Terminologies: IAM Resource: The user, group, role, policy, and identity provider objects that are stored in IAM. As with other AWS services, you can add, edit, and remove resources from IAM.\nIAM Identity: The IAM resource objects that are used to identify and group. You can attach a policy to an IAM identity. These include IAM users, IAM user groups, and IAM roles.\nIAM Entity: The IAM resource objects that AWS uses for authentication. These include IAM users and IAM roles.\nPrincipal: A principal is a person or application that can make a request for an action or operation on an AWS resource. The principal is authenticated as the AWS account root user or an IAM entity to make requests to AWS. Principals include federated users and assumed roles.\nIAM User IAM user is an entity that you create in AWS to represent the person or application that uses it to interact with AWS. A user in AWS consists of a name and credentials.\nIAM User Main Concepts: Brand new IAM users by default has no permissions permission boundary can be add to a user Each IAM user is associated with one and only one root user When creating a IAM user, IAM username isn\u0026rsquo;t capitlization sensitive (meaning Bob equals bob) An IAM user can be identified in 3 ways: Name (the name you specified when creating the user) Amazon Resource Name a.k.a. ARN (You use the ARN when you need to uniquely identify the user across all of AWS) Unique identifier (This ID is returned only when you use the API, Tools for Windows PowerShell, or AWS CLI to create the user; you do not see this ID in the console) Root User When first creating your AWS account, you begin with one identity that has complete access to all AWS services and resources in the account. This identity is the AWS account root user. An IAM user with administrator permissions is not the same thing as the AWS account root user.\nRoot user main concept: One account one root user A root user can create at most 5000 IAM users Complete access to all AWS services and resources in the account Create or delete an AWS account Best practice is to never use root user, create an IAM user and use that instead Credentials Depending on the user and how AWS resources are accessed, different credentials is required.\nConsole password\nA password that the user can type to sign in to interactive sessions such as the AWS Management Console.\nRoot user credential: email + password IAM user credential: account ID + username + password Access keys\nA combination of an access key ID + secret key\nAccess keys is needed to access AWS resources programmatically by using the AWS CLI, Tools for Windows PowerShell, the AWS SDKs or APIs. An access key is associated with an IAM user One IAM user can have at most 2 access keys the combination of access key ID + secret key is unique across AWS; therefore, it can be used to identify a specific user SSH keys for CodeCommit\nAn SSH public key in the OpenSSH format that can be used to authenticate with CodeCommit.\nServer certificates\nSSL/TLS certificates that you can use to authenticate with some AWS services. Use AWS Certificate Manager (ACM) to provision, manage, and deploy server certificates.\nIf you choose to use the long-term credentials of an IAM user in your application, do not embed access keys directly into your application code. Best practice, use temporary security credentials (IAM roles) instead of long-term access keys.\nIAM Users Real-Life Scenarios Team Members In a small organization or company, every team member who needs to access AWS resources will be given a IAM user account created by the company\u0026rsquo;s root user account. Each IAM user account will have unique credentials: username + password + accountID Federated Users In a bigger company with many teams and organizations that could possibly have hundreds and thousands of employees who need to have access to AWS resources. In this case, most companies would have a AWS Directory Service that uses AD (Microsoft Active Directory) to grant employees access to AWS resources after they have been verfified, which is also called the \u0026ldquo;single sign-on\u0026rdquo; approach. Cross Account Users When AWS users from other accounts wants to access your AWS resources than this is considered cross account user. Different accounts can come from the same organization or different organizations. This can be solved using IAM roles, which we will talk about in the next chapter. Programs and Applications Often times applications will request access for your teams AWS resource through AWS APIs or AWS CLI. In this case, they need an access key (access key ID + secret key) to authenticate their requests. However, as a best practice, use temporary security credentials (IAM roles) instead of access keys. IAM User Group An IAM user group is a collection of IAM users. User groups let you specify permissions for multiple users, which can make it easier to manage the permissions for those users. For example, you could have a user group called Admins and give that user group typical administrator permissions. Any user in that user group automatically has Admins group permissions. If a new user joins your organization and needs administrator privileges you can assign the appropriate permissions by adding the user to the Admins user group. If a person changes jobs in your organization, instead of editing that user\u0026rsquo;s permissions you can remove him or her from the old user groups and add him or her to the appropriate new user groups.\nUser Group Main Concepts A user group can contain many users, and a user can belong to multiple user groups. User groups can\u0026rsquo;t be nested; they can contain only users, not other user groups. There is no default user group that automatically includes all users in the AWS account. If you want to have a user group like that, you must create it and assign each new user to it. The number and size of IAM resources in an AWS account, such as the number of groups, and the number of groups that a user can be a member of, are limited. For more information, see IAM and AWS STS quotas, name requirements, and character limits. IAM group don\u0026rsquo;t have credentials One root account can have at most 300 user groups Every IAM user can only join at most 10 groups. Resources Official AWS IAM Users Documentation Official AWS IAM User Groups Documentation ","date":"June 12, 2022","hero":"/images/hero/iam_hero.png","permalink":"https://yeunyuankuo.github.io/posts/iam/","summary":"What is IAM? In AWS, IAM stands for Identity and Access Management (IAM). It is used to help users securely control access to AWS resources. Everything you do in AWS needs permission, which means that you will eventually encounter or use IAM features when building your own AWS services. IAM features includes deciding things like: who is eligible to sign-in, and who or what has permissions to use resources, etc.","tags":["AWS","Cloud","AWS IAM"],"title":"Learn AWS IAM (1) - IAM Users, Groups, Credentials"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yeunyuankuo.github.io/archives/","summary":"archives","tags":null,"title":"Archives"}]