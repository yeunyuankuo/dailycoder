[{"categories":["AWS","AWS SNS","Jest","Node.js","Testing"],"contents":"\nOutline There are a lot of jest mock examples out there, but never a clear example about Jest with AWS services (in this case, SNS). Today in this article I will show you how to mock sns.publish with Jest with all the code layed out and the logic explained.\nUnderstand what you\u0026rsquo;re testing How to write mock for SNS using Jest Closer look at sns.publish.mock 1. Understand what you\u0026rsquo;re testing Let\u0026rsquo;s take a look at the Node.js code that we want to write our unit test for. Inside sendMessage.js is the handler() function for the AWS Lamda that is responsible to send message to our AWS SNS whenever triggered. How this Lambda function is triggered doesn\u0026rsquo;t matter here. All it matters is that this Lambda function will send message to our target SNS.\nInside sendMessage.js:\nconst AWS = require(\u0026#39;aws-sdk\u0026#39;) const sns = new AWS.SNS() // this handler sends message to SNS whenever called upon const handler = async event =\u0026gt; { if event.status === \u0026#34;send\u0026#34; { try { await sns.publish({ Message: \u0026#34;send this message to SNS...\u0026#34; }).promise() } catch (err) { throw err } } } module.exports = { handler } This is a fairly basic example, but enough to help us demonstrate how to mock sns.publish.\nInside handler() function, it takes in an input event and checks if event.status equals to \u0026ldquo;send\u0026rdquo;. If equals to \u0026ldquo;send\u0026rdquo; then send the hard coded message \u0026ldquo;send this message to SNS\u0026hellip;\u0026rdquo; to our target SNS.\nNow, let\u0026rsquo;s try and mock this Lambda handler() function that publishes message to SNS!\n2. How to write mock for sns.publish using Jest Inside sendMessage.test.js:\ndescribe(\u0026#39;sendMessage handler behaviors\u0026#39;, () =\u0026gt; { let mockSNS beforeAll(() =\u0026gt; { // things you want to do before all the tests starts }) afterAll(() =\u0026gt; { // things you want to do after all the tests ends }) beforeEach(() =\u0026gt; { jest.resetModules() const AWS = require(\u0026#39;aws-sdk\u0026#39;) mockSNS = { publish: jest.fn().mockReturnValue({ promise: jest.fn().mockResolvedValue({}) }) } jest.spyOn(AWS, \u0026#39;SNS\u0026#39;).mockReturnValue(mockSNS) }) test(\u0026#39;should send message to SNS\u0026#39;, async () =\u0026gt; { const handler = require(\u0026#39;./sendMessage\u0026#39;) await handler(triggerInput(\u0026#34;send\u0026#34;)) expect(mockSNS.publish).toHaveBeenCalledTimes(1) expect(mockSNS.publish).toHaveBeenCalledWith(expectedPublishContent) }) const triggerInput = (status) =\u0026gt; { status: status } const expectedPublishContent = () =\u0026gt; { Message: \u0026#34;send this message to SNS...\u0026#34; } }) Ok, let\u0026rsquo;s break down this unit test code: describe(): the testing function that we use to define our test cases and behavior that will be carried out at different stages.\nbeforeAll(): define things you want to do before all the tests starts.\nafterAll(): define things you want to do after all the tests ends.\nbeforeEach(): define things to do before each test() starts.\njest.resetModule()\njest.spyOn(AWS, 'SNS')\n.mockReturnValue(mockSNS)\ntest(): the specific test case that we want the describe() function to run. Inside test('should send message to SNS) , it will require sendMessage.js and call the handler() that was previously defined and sends message to SNS when triggered.\nexpect(mockSNS.publish).toHaveBeenCalledTimes(1): This checks if our mocked sns.publish was called once. If called once, then retirn true. In our case, it should be true, since handler(triggerInput(\u0026quot;send\u0026quot;)) does recerice an event with event.status equals to \u0026ldquo;send\u0026rdquo;, and so our lambda function should sns.publish the message we want.\nexpect(mockSNS.publish).toHaveBeenCalledWith(expectedPublishContent): this checks if the correct message was called. This basically checks if the correct message was send through sns.publish. In this case, the correct message is defined inside expectedPublishContent. This expect function will check if the message we send to mock sns is the same as what\u0026rsquo;s inside expectedPublishContent. If the same, then return true.\n3. Closer look at sns.publish.mock # console.log(mockSNS.publish.mock) { \u0026#34;calls\u0026#34;: [ [ { \u0026#34;Message\u0026#34;: \u0026#34;send this message to SNS...\u0026#34; } ] ], \u0026#34;instances\u0026#34;: [ {} ], \u0026#34;invocationCallOrder\u0026#34;: [ 17 ], \u0026#34;results\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;return\u0026#34;, \u0026#34;value\u0026#34;: {} } ] } ","date":"June 16, 2022","hero":"/images/hero/sns_jest.png","permalink":"https://yeunyuankuo.github.io/posts/sns_jest/","summary":"Outline There are a lot of jest mock examples out there, but never a clear example about Jest with AWS services (in this case, SNS). Today in this article I will show you how to mock sns.publish with Jest with all the code layed out and the logic explained.\nUnderstand what you\u0026rsquo;re testing How to write mock for SNS using Jest Closer look at sns.publish.mock 1. Understand what you\u0026rsquo;re testing Let\u0026rsquo;s take a look at the Node.","tags":["AWS","AWS SNS","Jest","Node.js","Testing"],"title":"AWS SNS: Mock `sns.publish` with Jest"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yeunyuankuo.github.io/archives/","summary":"archives","tags":null,"title":"Archives"}]