[{"categories":["AWS","Cloud","AWS IAM"],"contents":"\nWhat is IAM? In AWS, Identity and Access Management (IAM) is one of the AWS services and it is used to help users securely control access to AWS resources. Everything you do in AWS needs permission, which means that you will eventually encounter or use IAM features when building your own AWS services. IAM features include deciding things like who is eligible to sign in, who or what has permission to use resources, etc.\nImportant IAM Terminologies: IAM Resource: The IAM user, group, role, policy, and identity provider objects. IAM, like other AWS services, allows you to add, edit, and delete resources.\nIAM Identity: The IAM resource objects used to identify and group resources. You can associate a policy with an IAM identity. IAM users, IAM user groups, and IAM roles are examples of these.\nIAM Entity: AWS\u0026rsquo;s IAM resource objects for authentication. IAM users and IAM roles are examples of these.\nPrincipal: A principal is a person or application who can request an action or operation on an AWS resource. To make requests to AWS, the principal must be authenticated as the AWS account root user or an IAM entity. Federated users and assumed roles are examples of principals.\nIAM User IAM user is an entity in AWS that you create to represent the person or application that interacts with AWS. AWS users are made up of a name and credentials.\nIAM User Main Concepts: Brand new IAM users by default has no permissions\npermission boundary can be add to a user\nEach IAM user is associated with one and only one root user\nWhen creating a IAM user, IAM username isn\u0026rsquo;t capitlization sensitive (meaning Bob equals bob)\nAn IAM user can be identified in 3 ways: Name (the name you specified when creating the user)\nAmazon Resource Name a.k.a. ARN (You use the ARN when you need to uniquely identify the user across all of AWS)\nUnique identifier (This ID is returned only when you use the API, Tools for Windows PowerShell, or AWS CLI to create the user; you do not see this ID in the console)\nRoot User When you first create an AWS account, you start with a single identity that has full access to all AWS services and resources in the account. This is the AWS account\u0026rsquo;s root user identity. An IAM user with administrator privileges is not the same as the root user of an AWS account.\nRoot user main concept: One account one root user\nA root user can create at most 5000 IAM users\nAccount-wide access to all AWS services and resources\nCreate or delete an AWS account\nBest practice is to never use root user, create an IAM user and use that instead\nCredentials Different credentials are required depending on the user and how AWS resources are accessed.\nConsole password\nA password that the user must enter in order to access interactive sessions such as the AWS Management Console.\nRoot user credential: email + password\nIAM user credential: account ID + username + password\nAccess keys\nA combination of an access key ID + secret key\nAccess keys is needed to access AWS resources programmatically by using the AWS CLI, Tools for Windows PowerShell, the AWS SDKs or APIs.\nAn access key is associated with an IAM user\nOne IAM user can have at most 2 access keys\nthe combination of access key ID + secret key is unique across AWS; therefore, it can be used to identify a specific user\nSSH keys for CodeCommit\nAn OpenSSH-formatted SSH public key that can be used to authenticate with CodeCommit.\nServer certificates\nSSL/TLS certificates can be used to authenticate with certain AWS services. To provision, manage, and deploy server certificates, use AWS Certificate Manager (ACM).\nIf you choose to use an IAM user\u0026rsquo;s long-term credentials in your application, do not embed access keys directly into the application code. Use temporary security credentials (IAM roles) instead of long-term access keys as best practice.\nIAM Users Real-Life Scenarios Team Members\nEvery team member who needs to access AWS resources in a small organization or company will be given an IAM user account created by the company\u0026rsquo;s root user account. Each IAM user account will have its own set of credentials: username + password + accountID\nFederated Users\nIn a larger company with multiple teams and organizations, hundreds of thousands of employees may require access to AWS resources. Most businesses would have an AWS Directory Service that uses AD (Microsoft Active Directory) to grant employees access to AWS resources after they have been verified, also known as the \u0026ldquo;single sign-on\u0026rdquo; approach.\nCross Account Users\nWhen AWS users from other accounts attempt to access your AWS resources, this is referred to as a cross account user. Different accounts may originate from the same or different organizations. This can be solved with IAM roles, which we will discuss in the following chapter.\nPrograms and Applications\nOften times applications will request access for your teams AWS resource through AWS APIs or AWS CLI. In this case, they need an access key (access key ID + secret key) to authenticate their requests. However, as a best practice, use temporary security credentials (IAM roles) instead of access keys.\nIAM User Group An IAM user group is literally what it means \u0026ndash; a group of IAM users. User groups allow you to specify permissions for multiple users, making it easier to manage those users\u0026rsquo; permissions. For example, you could create a user group called Admins and grant that group standard administrator privileges. Any user in that user group has Admins group permissions by default. If a new user joins your organization and requires administrator privileges, you can grant them by adding the user to the Admins user group. If a user changes jobs in your organization, you can remove him or her from the old user groups and add him or her to the appropriate new user groups instead of editing that user\u0026rsquo;s permissions.\nUser Group Main Concepts A user group can contain many users, and a user can belong to multiple user groups.\nUser groups can\u0026rsquo;t be nested; they can contain only users, not other user groups.\nThere is no default user group that automatically includes all users in the AWS account. If you want to have a user group like that, you must create it and assign each new user to it.\nThe number and size of IAM resources in an AWS account are limited, such as the number of groups and the number of groups that a user can be a member of. More information can be found at: https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html.\nIAM group don\u0026rsquo;t have credentials\nOne root account can have at most 300 user groups\nEvery IAM user can only join at most 10 groups.\nResources Official AWS IAM Users Documentation\nOfficial AWS IAM User Groups Documentation\n","date":"June 12, 2022","hero":"/images/hero/iam_hero.png","permalink":"https://yeunyuankuo.github.io/posts/iam/","summary":"What is IAM? In AWS, Identity and Access Management (IAM) is one of the AWS services and it is used to help users securely control access to AWS resources. Everything you do in AWS needs permission, which means that you will eventually encounter or use IAM features when building your own AWS services. IAM features include deciding things like who is eligible to sign in, who or what has permission to use resources, etc.","tags":["AWS","Cloud","AWS IAM"],"title":"Learn AWS IAM (1) - IAM Users, Groups, Credentials"},{"categories":null,"contents":"","date":"January 1, 0001","hero":"/images/default-hero.jpg","permalink":"https://yeunyuankuo.github.io/archives/","summary":"archives","tags":null,"title":"Archives"}]